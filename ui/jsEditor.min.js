"use strict";try{const open_editor=document.getElementById("open-editor"),editor_container=document.getElementById("editor-container");let drawer=new mdc.drawer.MDCDrawer(document.getElementById("editor-menu-drawer"));const sidebar_buttons=document.getElementById("editor-sidebar-buttons"),to_hide_divider=document.getElementById("to-hide-divider"),editor_action_bar=document.getElementById("editor-action-bar");mdc.ripple.MDCRipple.attachTo(open_editor),open_editor.addEventListener("click",()=>{editor_container.classList.contains("opened")?(editor_container.classList.remove("opened"),document.getElementById("open-editor-button-label").innerText="SHOW EDITOR"):(editor_container.classList.add("opened"),document.getElementById("open-editor-button-label").innerText="HIDE EDITOR")});const topAppBar=new mdc.topAppBar.MDCTopAppBar(document.getElementById("editor-top-bar"));topAppBar.setScrollTarget(document.getElementById("editor-top-bar")),topAppBar.listen("MDCTopAppBar:nav",()=>{drawer.open?editor_action_bar.classList.contains("opened")&&editor_action_bar.classList.remove("opened"):editor_action_bar.classList.contains("opened")||editor_action_bar.classList.add("opened"),drawer.open=!drawer.open}),ace.require("ace/ext/language_tools");const editor=ace.edit("editor");editor.session.setMode("ace/mode/javascript"),editor.setOptions({enableBasicAutocompletion:!0,enableSnippets:!0,enableLiveAutocompletion:!1}),editor.getSession().on("change",()=>{null!=current_selected_impl&&(save_impl_button.disabled=current_selected_impl.waiting,check_impl_button.disabled=!0,set_default_button.disabled=!0)});const check_impl_button=document.getElementById("check-impl-button"),set_default_button=document.getElementById("set-default-button"),save_impl_button=document.getElementById("save-impl-button"),delete_impl_button=document.getElementById("delete-impl-button"),select_name_dialog=new mdc.dialog.MDCDialog(document.getElementById("select-name-dialog")),impl_text_field=new mdc.textField.MDCTextField(document.getElementById("impl-name-text-field")),message_snackbar=new mdc.snackbar.MDCSnackbar(document.getElementById("editor-message-snackbar")),message_snackbar_label=document.getElementById("editor-message-label"),error_dialog=new mdc.dialog.MDCDialog(document.getElementById("editor-error-dialog")),error_dialog_text=document.getElementById("editor-error-dialog-content"),editor_title=document.getElementById("editor-title"),add_button=document.getElementById("add-impl-button");function showMessageSnackbar(text,extended_info="Not available"){error_dialog.close(),error_dialog_text.innerHTML=extended_info,message_snackbar.close(),message_snackbar_label.innerText=text,message_snackbar.open()}check_impl_button.addEventListener("click",()=>{null!=current_selected_impl&&current_selected_impl.checkFn()}),document.getElementById("editor-message-snackbar-show-info").addEventListener("click",()=>{error_dialog.open()});let current_default_button=null,current_selected_impl=null;const default_fn='// A js implementation of the native implementation may look like this:\n\n// Convert an odd string such as \'2/1\'\n// to a number, e.g. 2\nfunction toNumber(val) {\n    return Number(val.split(\'/\')[0]);\n}\n\n// Main function\n// Returns string, the odd of the horse to bet on,\n// or null, if no bet should be placed\nfunction run() {\n    let containsEvens = odds.includes("evens");\n    let lowest = null;\n\n    for (let i = 0; i < odds.length; i++) {\n        // Check if one probability >= 5/1 exists multiple times\n        for (let j = i + 1; j < odds.length; j++) {\n            // If odds[i] >= 5/1 exists multiple times, do not bet\n            if ((odds[i] == "evens" || toNumber(odds[i]) <= 5) && odds[i] == odds[j])\n                return null;\n        }\n\n        // If odds contains \'evens\' and does also\n        // contain another one >= 3/1, do not bet\n        if (containsEvens && (odds[i] == "2/1" || odds[i] == "3/1"))\n            return null;\n\n        // Set the lowest odd\n        if (!containsEvens && (lowest == null || toNumber(odds[i]) < toNumber(lowest))) {\n            lowest = odds[i];\n        }\n    }\n\n    // If the odds contain evens, this is the lowest\n    if (containsEvens) {\n        lowest = "evens";\n    }\n\n    // Return the lowest odd\n    return lowest;\n}\n\n// Set the result.\n// Set null if no bet should be placed,\n// the odd of the horse to bet on otherwise\nsetResult(run());\n';function syntaxHighlight(json){return"string"!=typeof json&&(json=JSON.stringify(json,void 0,2)),(json=json.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")).replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,(function(match){var cls="number";return/^"/.test(match)?cls=/:$/.test(match)?"key":"string":/true|false/.test(match)?cls="boolean":/null/.test(match)&&(cls="null"),'<span class="'+cls+'">'+match+"</span>"}))}function setEditorDisabled(val){editor.setReadOnly(val),editor.textInput.getElement().disabled=val}class sidebarButton{constructor(element,functionString,name,functionStore=null,isDefault=!1){if(isDefault)this.element=element,this.graphic=element.getElementsByClassName("material-icons")[0];else{let el=document.createElement("a");el.className="mdc-list-item";let ripple=document.createElement("span");ripple.className="mdc-list-item__ripple";let graphic=document.createElement("i");graphic.className="material-icons mdc-list-item__graphic editor-icon-err",graphic.innerText="error_outline";let text=document.createElement("span");text.className="mdc-list-item__text",text.innerText=name,element.appendChild(el),el.appendChild(ripple),el.appendChild(graphic),el.appendChild(text),this.element=el,this.graphic=graphic,drawer=new mdc.drawer.MDCDrawer(document.getElementById("editor-menu-drawer"))}this.element.addEventListener("click",()=>{this.setOpened()}),this.isDefault=isDefault,this.name=name,this.default=!1,this.ok=!1,this.waiting=!1,this.fnString=functionString,this.fn=isDefault?null:null==functionStore?isolatedFunction.addFunction(name,functionString):functionStore}setOpened(){current_selected_impl=this,editor.setValue(this.fnString,-1),drawer.open=!1,this.isDefault?(editor_title.innerText=`View ${this.name}`,save_impl_button.disabled=!0,delete_impl_button.disabled=!0,setEditorDisabled(!0)):(editor_title.innerText=`Edit ${this.name}`,delete_impl_button.disabled=this.waiting,save_impl_button.disabled=this.ok,setEditorDisabled(!1)),check_impl_button.disabled=this.waiting,set_default_button.disabled=this.default||!this.ok}setOk(val){this.ok=val,this.isDefault||(this.fn.ok=val),val?(this.graphic.className="material-icons mdc-list-item__graphic editor-icon-ok",this.default?this.graphic.innerText="check_circle_outline":this.graphic.innerText="done"):(this.graphic.className="material-icons mdc-list-item__graphic editor-icon-err",this.graphic.innerText="error_outline")}setDefault(val){if(val&&!this.ok)throw new Error("The element is not ok");if(this.default=val,this.graphic.className="material-icons mdc-list-item__graphic editor-icon-ok",val?(this.graphic.innerText="check_circle_outline",current_default_button!=this&&current_default_button.setDefault(!1),current_default_button=this,showMessageSnackbar(`'${this.name}' is now the default implementation`)):this.ok?this.graphic.innerText="done":(this.graphic.className="material-icons mdc-list-item__graphic editor-icon-err",this.graphic.innerText="error_outline"),this.isDefault)isolatedFunction.revertToDefaultImpl();else try{isolatedFunction.setActiveFunction(this.fn),this.fn.active=!0}catch(e){autobetLib.logging.error(`Could not set the active function: ${e.message}`),isolatedFunction.revertToDefaultImpl()}}checkFn(){this.waiting=!0,this.graphic.innerText="watch_later",this.graphic.className="material-icons mdc-list-item__graphic editor-icon-wait",check_impl_button.disabled=!0,current_selected_impl==this&&(save_impl_button.disabled=!0,delete_impl_button.disabled=!0),autobetLib.logging.warn("TODO: This should return a promise");let res=isolatedFunction.checkFunction(this.fnString);this.setOk(res.ok),this.waiting=!1,saveAllFunctions(),res.ok?showMessageSnackbar(`The test of function '${this.name}' was ok`,'<pre style="width: 65vw;">Test results:<br>'+syntaxHighlight(JSON.stringify(res.res,null,6))+"</pre>"):showMessageSnackbar(`The test of function '${this.name}' returned an error`,"Error: "+res.res.error+"<br>Stack:<br>"+res.res.stack.replaceAll("\n","<br>")+"<br><pre style='width: 65vw;'>Data:<br>"+syntaxHighlight(JSON.stringify(res.res.data,null,6))+"</pre>"),current_selected_impl==this&&(check_impl_button.disabled=!1,this.isDefault||(delete_impl_button.disabled=!1,set_default_button.disabled=!res.ok,save_impl_button.disabled=res.ok))}destroy(){isolatedFunction.deleteFunction(this.fn),this.element.parentNode.removeChild(this.element),showMessageSnackbar(`Implementation ${this.name} deleted`,`Implementation ${this.name} successfully deleted`)}setFunctionString(str){this.fnString=str,this.fn.functionString=str}getFunctionString(){return this.fnString}}isolatedFunction.setRevertToDefaultCallback(()=>{if(null!=current_default_button&&current_default_button.default)current_default_button.setDefault(!1);else for(let i=0;i<buttons.length;i++)functions[i].setDefault(!1);default_button.setDefault(!0)});const default_button=new sidebarButton(document.getElementById("default-impl-button"),default_fn,"default",null,!0),buttons=[default_button];current_default_button=default_button,current_selected_impl=default_button,default_button.setOpened(),default_button.setOk(!0),to_hide_divider.style.visibility="hidden";{let anyIsActive=!1,functions=isolatedFunction.getFunctions();for(let i=0;i<functions.length;i++){let fn=new sidebarButton(sidebar_buttons,functions[i].functionString,functions[i].name,functions[i]);fn.setOk(functions[i].ok),buttons.push(fn),functions[i].active&&(fn.setDefault(!0),anyIsActive=!0,message_snackbar.close())}anyIsActive||(default_button.setDefault(!0),message_snackbar.close())}function saveAllFunctions(){let fns=[];for(let i=1;i<buttons.length;i++)fns.push(buttons[i].fn);isolatedFunction.saveFunctions(fns)}function buttonsContainName(name){for(let i=0;i<buttons.length;i++)if(buttons[i].name==name)return!0;return!1}add_button.addEventListener("click",()=>{drawer.open=!1,editor_title.innerText="Add implementation",editor.setValue("",-1),save_impl_button.disabled=!1,delete_impl_button.disabled=!1,set_default_button.disabled=!0,check_impl_button.disabled=!0,current_selected_impl=null,setEditorDisabled(!1)}),save_impl_button.addEventListener("click",()=>{null==current_selected_impl?select_name_dialog.open():(current_selected_impl.default&&(default_button.setDefault(!0),isolatedFunction.revertToDefaultImpl()),delete_impl_button.disabled=!0,save_impl_button.disabled=!0,current_selected_impl.setFunctionString(editor.getValue()),saveAllFunctions(),current_selected_impl.checkFn())}),set_default_button.addEventListener("click",()=>{current_selected_impl.setDefault(!0),set_default_button.disabled=!0,saveAllFunctions()}),delete_impl_button.addEventListener("click",()=>{if(null==current_selected_impl)editor.setValue("",-1);else{let index=buttons.indexOf(current_selected_impl);buttons.splice(index,1),current_selected_impl.default&&(default_button.setDefault(!0),isolatedFunction.revertToDefaultImpl()),1==buttons.length&&(to_hide_divider.style.visibility="hidden"),current_selected_impl.destroy(),current_selected_impl=default_button,default_button.setOpened(),drawer.list.selectedIndex=0}}),select_name_dialog.listen("MDCDialog:closed",e=>{if("save"==e.detail.action){if(0==impl_text_field.value.length)return impl_text_field.valid=!1,select_name_dialog.open(),void showMessageSnackbar(`Could not save a function with the name '${impl_text_field.value}'`,"The function name was empty");if(impl_text_field.value.length>20)return impl_text_field.valid=!1,select_name_dialog.open(),void showMessageSnackbar("Could not save the function","The function name is too long. Function names may only be up to 20 characters long.");if(buttonsContainName(impl_text_field.value))return impl_text_field.valid=!1,select_name_dialog.open(),void showMessageSnackbar(`Could not save a function with the name '${impl_text_field.value}'`,`A function with the name '${impl_text_field.value}' already exists`);const name_regex=/^([a-zA-Z]*[0-9]*_{0,1})*$/g;if(!name_regex.test(impl_text_field.value))return impl_text_field.valid=!1,select_name_dialog.open(),void showMessageSnackbar(`Could not save a function with the name '${impl_text_field.value}'`,`The function name '${impl_text_field.value}' is invalid. Function names may only contain `+"characters (a-z), numbers(0-9) and underscores in any combination.");let b=new sidebarButton(sidebar_buttons,editor.getValue(),impl_text_field.value);b.checkFn(),buttons.push(b),editor.setValue(""),to_hide_divider.style.visibility="visible",saveAllFunctions()}impl_text_field.value=""})}catch(e){autobetLib.logging.error(`Js exception thrown: ${e.message}`),exception()}