const IS_NODE_JS="function"==typeof require;let https=null,fs=null;IS_NODE_JS&&(https=require("https"),fs=require("fs"));const webRequest={apiRequestNodeJs:function(request,request_base,api_port,user_agent,oauth_token){let _headers;_headers=null!=oauth_token?{"User-Agent":user_agent,Authorization:`token ${oauth_token}`,Accept:"application/vnd.github.v3+json"}:{"User-Agent":user_agent,Accept:"application/vnd.github.v3+json"};const options={hostname:request_base,port:api_port,path:request,method:"GET",headers:_headers};return new Promise((resolve,reject)=>{const req=https.request(options,res=>{let data="";res.on("data",d=>{data+=d}),res.on("end",()=>{switch(res.statusCode){case 200:return resolve(data);case 302:return resolve(JSON.stringify(res.headers));default:let err=`The status code was not 200, it was: ${res.statusCode}, `;return 0==data.length?err+="no error message was returned.":err+=`error message returned: ${data}`,reject(err)}})});req.on("error",error=>{reject(error)}),req.end()})},apiRequestWeb:function(request,request_base,user_agent,oauth_token){let xhr;return xhr=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP"),new Promise((resolve,reject)=>{xhr.onreadystatechange=()=>{if(4==xhr.readyState)switch(xhr.status){case 200:return resolve(xhr.responseText);case 302:let headers=xhr.getAllResponseHeaders();return null!=headers?resolve(headers):reject("No headers were received");default:let err=`The status code was not 200, it was: ${xhr.status}, `;return 0==xhr.responseText.length?err+="no error message was returned.":err+=`error message returned: ${xhr.responseText}`,reject(err)}},xhr.onerror=()=>{reject("The XMLHttpRequest returned an error")},xhr.open("GET",`https://${request_base}${request}`,!1),xhr.setRequestHeader("User-Agent",user_agent),null!=oauth_token&&xhr.setRequestHeader("Authorization",`token ${oauth_token}`),xhr.setRequestHeader("Accept","application/vnd.github.v3+json"),xhr.send()})},apiRequest:function(request,request_base,user_agent,oauth_token){return null!=https?this.apiRequestNodeJs(request,request_base,443,user_agent,oauth_token):this.apiRequestWeb(request,request_base,user_agent,oauth_token)}},fileDownload={downloadFileLocally:async function(url,destination,size,progress_callback){if(null!=https&&null!=fs)return new Promise((resolve,reject)=>{const file=fs.createWriteStream(destination),request=https.get(url,res=>{if(res.pipe(file),progress_callback){let len;len=null==size?parseInt(res.headers["content-length"],10)/1048576:size;let cur=0;res.on("data",data=>{cur+=data.length;let progress=(100*cur/len).toFixed(2);progress>100&&(progress=100),progress_callback(progress)})}res.on("end",()=>{switch(res.statusCode){case 200:return file.close(resolve);default:let err=`The status code was not 200, it was: ${res.statusCode}, `;return 0==data.length?err+="no error message was returned.":err+=`error message returned: ${data}`,reject(err)}})});request.on("error",error=>{reject(error)}),file.on("error",err=>(fs.unlink(destination),reject(err.message))),request.end()});throw new Error("downloadFileLocally() was called in an non-node-js environment")},downloadFileWeb:function(url){if(IS_NODE_JS)throw new Error("downloadFileWeb() is only available in web browsers");window.location=url}};class GithubApi{constructor(owner,repo,oauth_token){this.owner=owner,this.repo=repo,this.oath_token=oauth_token,this.REQUEST_BASE="api.github.com",this.USER_AGENT="artifacts-api-app"}async getWorkflows(){return JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/actions/runs`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token))}async getArtifactsForWorkflow(id){return JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/actions/runs/${id}/artifacts`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token))}async getWorkflow(id){return JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/actions/workflows/${id}`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token))}async getLatestRelease(){return JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/releases/latest`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token))}async getLatestReleaseTag(){let res=await this.getLatestRelease();return res.hasOwnProperty("tag_name")?res.tag_name:void 0}async getArtifacts(){return JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/actions/artifacts`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token))}async getLatestArtifact(artifactName){let artifacts=await this.getArtifacts();if(artifacts.hasOwnProperty("artifacts")){artifacts=artifacts.artifacts;for(let i=0;i<artifacts.length;i++)if(artifacts.hasOwnProperty(i)&&artifacts[i].hasOwnProperty("name")){let name;if(artifacts[i].name.match(artifactName))return artifacts[i]}}}async getArtifactDownloadAddress(artifactId,format="zip"){let res=JSON.parse(await webRequest.apiRequest(`/repos/${this.owner}/${this.repo}/actions/artifacts/${artifactId}/${format}`,this.REQUEST_BASE,this.USER_AGENT,this.oath_token));return res.hasOwnProperty("location")&&"string"==typeof res.location?res.location:void 0}async downloadArtifact(artifactId,format="zip",destination="",size,progress_callback){if(IS_NODE_JS&&0==destination.length)throw new Error("When running with node.js, a destination must be set");const address=await this.getArtifactDownloadAddress(artifactId,format);if(null==address)throw new Error("Could not get the download address");IS_NODE_JS?fileDownload.downloadFileLocally(address,destination,size,progress_callback):fileDownload.downloadFileWeb(address)}}